{"version":3,"sources":["css/main.module.css","getWeather.js","CityForm.js","FirstCity.js","SecondCity.js","IntroPage.js","FinalCity.js","ResultsPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","process","checkResponse","response","status","json","CityForm","city","setCity","setStage","onSubmit","event","preventDefault","stage","type","placeholder","defaultValue","onChange","target","value","required","className","main","button","FirstCity","slide","SecondCity","score","temp","setTemp","setScore","tempTest","lastCity","slice","toFixed","Number","IntroPage","introtext","onClick","st","FinalCity","ResultsPage","App","React","useState","undefined","setTempTest","useEffect","fetch","getWeather","then","data","catch","err","console","error","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62dad1aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"slide\":\"main_slide__1gOgn\",\"button\":\"main_button__P9sBW\",\"introtext\":\"main_introtext__2--rX\"};","const API_KEY = process.env.API_KEY;\nconst checkResponse = (response) => {\n\tif (response.status !== 200) {\n\t\treturn response.status;\n\t}\n\treturn response.json();\n};\n\nconst getWeather = (city) => {\n\treturn fetch(\n\t\t`http://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${API_KEY}`\n\t);\n};\nexport { getWeather, checkResponse };\n","import React from \"react\";\nimport main from \"./css/main.module.css\";\nconst CityForm = ({ city, setCity, setStage }) => {\n\tconst handleSubmission = (event) => {\n\t\tif (event) {\n\t\t\tevent.preventDefault();\n\t\t\tsetStage((stage) => stage + 1);\n\t\t}\n\t};\n\n\tconst handleInput = (event) => {\n\t\tsetCity(event.target.value);\n\t};\n\treturn (\n\t\t<form onSubmit={handleSubmission}>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tplaceholder=\"Enter city here\"\n\t\t\t\tdefaultValue={city}\n\t\t\t\tonChange={handleInput}\n\t\t\t\trequired\n\t\t\t></input>\n\t\t\t<button className={main.button} type=\"submit\">\n\t\t\t\tGo!\n\t\t\t</button>\n\t\t</form>\n\t);\n};\n\nexport default CityForm;\n","import React from \"react\";\nimport CityForm from \"./CityForm\";\nimport main from \"./css/main.module.css\";\n\nconst FirstCity = ({ city, setStage, setCity }) => {\n\treturn (\n\t\t<div className={main.slide}>\n\t\t\t<h1>Enter your first city in the form below</h1>\n\t\t\t<CityForm city={city} setStage={setStage} setCity={setCity} />\n\t\t</div>\n\t);\n};\n\nexport default FirstCity;\n","import React from \"react\";\nimport CityForm from \"./CityForm\";\nimport main from \"./css/main.module.css\";\n\nimport { getWeather, checkResponse } from \"./getWeather\";\nconst SecondCity = ({\n\tscore,\n\ttemp,\n\tcity,\n\tsetTemp,\n\tsetScore,\n\tsetCity,\n\tsetStage,\n\tstage,\n\ttempTest\n}) => {\n\tconst lastCity = (\" \" + city).slice(1); // awful hack for deep copy\n\treturn tempTest ? (\n\t\t<div className={main.slide}>\n\t\t\t<h1>Stage {stage} page</h1>\n\t\t\t<p>\n\t\t\t\tThe temperature of {lastCity} is {temp.toFixed(1)} C. Your total\n\t\t\t\tscore so far is {Number(score).toFixed()}.\n\t\t\t</p>\n\t\t\t<p> What's your next destination? Enter it here:</p>\n\t\t\t<CityForm city={city} setCity={setCity} setStage={setStage} />\n\t\t</div>\n\t) : null;\n};\n\nexport default SecondCity;\n","import React from \"react\";\nimport main from \"./css/main.module.css\";\n\nconst IntroPage = ({ setStage }) => {\n\treturn (\n\t\t<div className={main.slide}>\n\t\t\t<h1>Welcome to the game!</h1>\n\t\t\t<p className={main.introtext}>\n\t\t\t\tYour mission is to fly around the world and soak up the sun!\n\t\t\t\tDepending on how hot your destination is, you'll get (or lose!)\n\t\t\t\ta tan. Try to get the best tan you can in 5 trips, but be\n\t\t\t\tcareful not to burn yourself!\n\t\t\t</p>\n\t\t\t<button\n\t\t\t\tclassName={main.button}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetStage((st) => st + 1);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tLet's go!\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default IntroPage;\n","import React from \"react\";\nimport main from \"./css/main.module.css\";\n\nconst FinalCity = ({ city, temp, setStage }) => {\n\tconst handleStage = () => {\n\t\tsetStage((stage) => stage + 1);\n\t};\n\n\treturn (\n\t\t<div className={main.slide}>\n\t\t\t<p>\n\t\t\t\tThe temperature of {city} is {Number(temp).toFixed()} C. Click\n\t\t\t\tthe button to see your final score!\n\t\t\t</p>\n\t\t\t<button className={main.button} onClick={handleStage}>\n\t\t\t\tGo!\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default FinalCity;\n","import React from \"react\";\nimport main from \"./css/main.module.css\";\n\nconst ResultsPage = ({ score, setStage, setScore }) => {\n\treturn (\n\t\t<div className={main.slide}>\n\t\t\t<h1> Congratulations, you finished!</h1>\n\n\t\t\t<p>Your final score is {Number(score).toFixed()}</p>\n\n\t\t\t{score > 30 ? (\n\t\t\t\tscore > 50 ? (\n\t\t\t\t\t<p>You burnt yourself you silly goose! ðŸ˜«</p>\n\t\t\t\t) : (\n\t\t\t\t\t<p>You got a good tan! ðŸ˜Ž</p>\n\t\t\t\t)\n\t\t\t) : (\n\t\t\t\t<p>You need some Vitamin D stat ðŸ’Š</p>\n\t\t\t)}\n\t\t\t<button\n\t\t\t\tclassName={main.button}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetStage(0);\n\t\t\t\t\tsetScore(10);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tRestart Game\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default ResultsPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport { getWeather, checkResponse } from \"./getWeather.js\";\n\nimport FirstCity from \"./FirstCity\";\nimport SecondCity from \"./SecondCity\";\nimport IntroPage from \"./IntroPage\";\nimport FinalCity from \"./FinalCity\";\nimport ResultsPage from \"./ResultsPage\";\n\n//TODO\n// * score is one behind what it should be.\n// * React.useEffect()???\n// * Make it pretty - animations!\n// * Form validation\n// * Accessibility\n\nconst App = () => {\n\t// react state variables\n\tconst [score, setScore] = React.useState(30);\n\tconst [stage, setStage] = React.useState(0);\n\tconst [city, setCity] = React.useState(\"London\");\n\tconst [temp, setTemp] = React.useState(20);\n\tconst [tempTest, setTempTest] = React.useState(undefined);\n\n\tconst handleTemp = (data) => {\n\t\tsetTemp(data.main.temp - 273.3); // K -> C\n\t};\n\n\tconst handleScore = (temperature) => {\n\t\tsetScore((sc) => sc + (temperature - 10));\n\t};\n\n\tReact.useEffect(() => {\n\t\tgetWeather(city)\n\t\t\t.then(checkResponse)\n\t\t\t.then((data) => {\n\t\t\t\tsetTemp(data.main.temp - 273.3);\n\t\t\t\tsetScore(\n\t\t\t\t\t(score) =>\n\t\t\t\t\t\tNumber(score) + (Number(data.main.temp) - 273.3 - 20)\n\t\t\t\t);\n\t\t\t\tsetTempTest(Number(data.main.temp));\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.error(err);\n\t\t\t});\n\t}, [stage]);\n\treturn (\n\t\t<>\n\t\t\t{(stage === 0 && <IntroPage setStage={setStage} />) ||\n\t\t\t\t(stage === 1 && (\n\t\t\t\t\t<FirstCity\n\t\t\t\t\t\tcity={city}\n\t\t\t\t\t\tscore={score}\n\t\t\t\t\t\tsetCity={setCity}\n\t\t\t\t\t\tsetStage={setStage}\n\t\t\t\t\t/>\n\t\t\t\t)) ||\n\t\t\t\t([2, 3, 4].includes(stage) && (\n\t\t\t\t\t<SecondCity\n\t\t\t\t\t\tscore={score}\n\t\t\t\t\t\ttemp={temp}\n\t\t\t\t\t\tcity={city}\n\t\t\t\t\t\tsetScore={setScore}\n\t\t\t\t\t\tsetTemp={setTemp}\n\t\t\t\t\t\tsetCity={setCity}\n\t\t\t\t\t\tsetStage={setStage}\n\t\t\t\t\t\tstage={stage}\n\t\t\t\t\t\ttempTest={tempTest}\n\t\t\t\t\t/>\n\t\t\t\t)) ||\n\t\t\t\t(stage === 5 && (\n\t\t\t\t\t<FinalCity city={city} temp={temp} setStage={setStage} />\n\t\t\t\t)) ||\n\t\t\t\t(stage === 6 && (\n\t\t\t\t\t<ResultsPage\n\t\t\t\t\t\tscore={score}\n\t\t\t\t\t\tsetStage={setStage}\n\t\t\t\t\t\tsetScore={setScore}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t</>\n\t);\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}